/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject, LOCALE_ID, Optional } from '@angular/core';
import { Observable, Subject, of } from 'rxjs';
import { GOOGLE_API_KEY, CHART_VERSION } from '../models/injection-tokens.model';
import * as ɵngcc0 from '@angular/core';
export class ScriptLoaderService {
    /**
     * @param {?} localeId
     * @param {?=} googleApiKey
     * @param {?=} chartVersion
     */
    constructor(localeId, googleApiKey, chartVersion) {
        this.localeId = localeId;
        this.googleApiKey = googleApiKey;
        this.chartVersion = chartVersion;
        this.scriptSource = 'https://www.gstatic.com/charts/loader.js';
        this.onLoadSubject = new Subject();
        this.initialize();
    }
    /**
     * @return {?}
     */
    get onReady() {
        if (this.doneLoading) {
            return of(true);
        }
        return this.onLoadSubject.asObservable();
    }
    /**
     * @return {?}
     */
    get doneLoading() {
        if (typeof google === 'undefined' || typeof google.charts === 'undefined') {
            return false;
        }
        return true;
    }
    /**
     * @private
     * @return {?}
     */
    get isLoading() {
        if (this.doneLoading) {
            return false;
        }
        /** @type {?} */
        const pageScripts = Array.from(document.getElementsByTagName('script'));
        /** @type {?} */
        const googleChartsScript = pageScripts.find((/**
         * @param {?} script
         * @return {?}
         */
        script => script.src === this.scriptSource));
        return googleChartsScript !== undefined;
    }
    /**
     * @param {?} packages
     * @return {?}
     */
    loadChartPackages(packages) {
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        observer => {
            /** @type {?} */
            const config = {
                packages: packages,
                language: this.localeId,
                mapsApiKey: this.googleApiKey
            };
            google.charts.load(this.chartVersion, config);
            google.charts.setOnLoadCallback((/**
             * @return {?}
             */
            () => {
                observer.next();
                observer.complete();
            }));
        }));
    }
    /**
     * @private
     * @return {?}
     */
    initialize() {
        if (!this.doneLoading && !this.isLoading) {
            /** @type {?} */
            const script = this.createScriptElement();
            script.onload = (/**
             * @return {?}
             */
            () => {
                this.onLoadSubject.next(true);
                this.onLoadSubject.complete();
            });
            script.onerror = (/**
             * @return {?}
             */
            () => {
                console.error('Failed to load the google chart script!');
                this.onLoadSubject.error('Failed to load the google chart script!');
                this.onLoadSubject.complete();
            });
        }
    }
    /**
     * @private
     * @return {?}
     */
    createScriptElement() {
        /** @type {?} */
        const script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = this.scriptSource;
        script.async = true;
        document.getElementsByTagName('head')[0].appendChild(script);
        return script;
    }
}
ScriptLoaderService.ɵfac = function ScriptLoaderService_Factory(t) { return new (t || ScriptLoaderService)(ɵngcc0.ɵɵinject(LOCALE_ID), ɵngcc0.ɵɵinject(GOOGLE_API_KEY, 8), ɵngcc0.ɵɵinject(CHART_VERSION, 8)); };
ScriptLoaderService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ScriptLoaderService, factory: ScriptLoaderService.ɵfac });
/** @nocollapse */
ScriptLoaderService.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: String, decorators: [{ type: Inject, args: [GOOGLE_API_KEY,] }, { type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [CHART_VERSION,] }, { type: Optional }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScriptLoaderService, [{
        type: Injectable
    }], function () { return [{ type: String, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }, { type: String, decorators: [{
                type: Inject,
                args: [GOOGLE_API_KEY]
            }, {
                type: Optional
            }] }, { type: String, decorators: [{
                type: Inject,
                args: [CHART_VERSION]
            }, {
                type: Optional
            }] }]; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    ScriptLoaderService.prototype.scriptSource;
    /**
     * @type {?}
     * @private
     */
    ScriptLoaderService.prototype.onLoadSubject;
    /**
     * @type {?}
     * @private
     */
    ScriptLoaderService.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    ScriptLoaderService.prototype.googleApiKey;
    /**
     * @type {?}
     * @private
     */
    ScriptLoaderService.prototype.chartVersion;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,