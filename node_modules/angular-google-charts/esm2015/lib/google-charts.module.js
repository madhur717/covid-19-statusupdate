/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, LOCALE_ID } from '@angular/core';
import { ScriptLoaderService } from './script-loader/script-loader.service';
import { RawChartComponent } from './raw-chart/raw-chart.component';
import { GoogleChartComponent } from './google-chart/google-chart.component';
import { GOOGLE_API_KEY, CHART_VERSION } from './models/injection-tokens.model';
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
export const GOOGLE_CHARTS_PROVIDERS = [
    {
        provide: ScriptLoaderService,
        useFactory: setupScriptLoaderService,
        deps: [LOCALE_ID, GOOGLE_API_KEY, CHART_VERSION]
    }
];
export class GoogleChartsModule {
    /**
     * @param {?=} googleApiKey
     * @param {?=} chartVersion
     * @return {?}
     */
    static forRoot(googleApiKey, chartVersion) {
        return {
            ngModule: GoogleChartsModule,
            providers: [
                GOOGLE_CHARTS_PROVIDERS,
                { provide: GOOGLE_API_KEY, useValue: googleApiKey ? googleApiKey : '' },
                { provide: CHART_VERSION, useValue: chartVersion ? chartVersion : '46' }
            ]
        };
    }
}
GoogleChartsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: GoogleChartsModule });
GoogleChartsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function GoogleChartsModule_Factory(t) { return new (t || GoogleChartsModule)(); }, providers: [ScriptLoaderService] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(GoogleChartsModule, { declarations: function () { return [GoogleChartComponent, RawChartComponent]; }, exports: function () { return [GoogleChartComponent, RawChartComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GoogleChartsModule, [{
        type: NgModule,
        args: [{
                providers: [ScriptLoaderService],
                declarations: [GoogleChartComponent, RawChartComponent],
                exports: [GoogleChartComponent, RawChartComponent]
            }]
    }], null, null); })();
/**
 * @param {?} localeId
 * @param {?} googleApiKey
 * @param {?} chartVersion
 * @return {?}
 */
export function setupScriptLoaderService(localeId, googleApiKey, chartVersion) {
    return new ScriptLoaderService(localeId, googleApiKey, chartVersion);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWNoYXJ0cy5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIm5nOi9hbmd1bGFyLWdvb2dsZS1jaGFydHMvbGliL2dvb2dsZS1jaGFydHMubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFZLFNBQVMsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFFbkYsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDNUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDcEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDN0UsT0FBTyxFQUFFLGNBQWMsRUFBRSxhQUFhLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNoRjs7QUFDQSxNQUFNLE9BQU8sdUJBQXVCLEdBQWU7QUFDbkQsSUFBRTtBQUNGLFFBQUksT0FBTyxFQUFFLG1CQUFtQjtBQUNoQyxRQUFJLFVBQVUsRUFBRSx3QkFBd0I7QUFDeEMsUUFBSSxJQUFJLEVBQUUsQ0FBQyxTQUFTLEVBQUUsY0FBYyxFQUFFLGFBQWEsQ0FBQztBQUNwRCxLQUFHO0FBQ0gsQ0FBQztBQU9ELE1BQU0sT0FBTyxrQkFBa0I7QUFDL0I7QUFBUTtBQUFnQztBQUFnQztBQUFtQjtBQUNyRixJQURHLE1BQU0sQ0FBQyxPQUFPLENBQUMsWUFBcUIsRUFBRSxZQUFxQjtBQUFJLFFBQ3BFLE9BQU87QUFDWCxZQUFNLFFBQVEsRUFBRSxrQkFBa0I7QUFDbEMsWUFBTSxTQUFTLEVBQUU7QUFDakIsZ0JBQVEsdUJBQXVCO0FBQy9CLGdCQUFRLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtBQUMvRSxnQkFBUSxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUU7QUFDaEYsYUFBTztBQUNQLFNBQUssQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNIOzhDQWhCQyxRQUFRLFNBQUM7QUFDUixTQUFTLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxrQkFDaEMsWUFBWSxFQUFFLENBQUMsb0JBQW9CLEVBQUUsaUJBQWlCLENBQUMsa0JBQ3ZELE9BQU8sRUFBRSxDQUFDLG9CQUFvQixFQUFFLGlCQUFpQixDQUFDO0tBQ25EOzs7Ozs7OzswQkFDSTtBQUFDO0FBQUk7QUFBdUI7QUFDUDtBQUEyQjtBQUFlO0FBWXBFLE1BQU0sVUFBVSx3QkFBd0IsQ0FBQyxRQUFnQixFQUFFLFlBQW9CLEVBQUUsWUFBb0I7QUFBSSxJQUN2RyxPQUFPLElBQUksbUJBQW1CLENBQUMsUUFBUSxFQUFFLFlBQVksRUFBRSxZQUFZLENBQUMsQ0FBQzs7QUFsQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFPQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQWZBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFjQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgUHJvdmlkZXIsIExPQ0FMRV9JRCwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgU2NyaXB0TG9hZGVyU2VydmljZSB9IGZyb20gJy4vc2NyaXB0LWxvYWRlci9zY3JpcHQtbG9hZGVyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBSYXdDaGFydENvbXBvbmVudCB9IGZyb20gJy4vcmF3LWNoYXJ0L3Jhdy1jaGFydC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBHb29nbGVDaGFydENvbXBvbmVudCB9IGZyb20gJy4vZ29vZ2xlLWNoYXJ0L2dvb2dsZS1jaGFydC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBHT09HTEVfQVBJX0tFWSwgQ0hBUlRfVkVSU0lPTiB9IGZyb20gJy4vbW9kZWxzL2luamVjdGlvbi10b2tlbnMubW9kZWwnO1xyXG5cclxuZXhwb3J0IGNvbnN0IEdPT0dMRV9DSEFSVFNfUFJPVklERVJTOiBQcm92aWRlcltdID0gW1xyXG4gIHtcclxuICAgIHByb3ZpZGU6IFNjcmlwdExvYWRlclNlcnZpY2UsXHJcbiAgICB1c2VGYWN0b3J5OiBzZXR1cFNjcmlwdExvYWRlclNlcnZpY2UsXHJcbiAgICBkZXBzOiBbTE9DQUxFX0lELCBHT09HTEVfQVBJX0tFWSwgQ0hBUlRfVkVSU0lPTl1cclxuICB9XHJcbl07XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIHByb3ZpZGVyczogW1NjcmlwdExvYWRlclNlcnZpY2VdLFxyXG4gIGRlY2xhcmF0aW9uczogW0dvb2dsZUNoYXJ0Q29tcG9uZW50LCBSYXdDaGFydENvbXBvbmVudF0sXHJcbiAgZXhwb3J0czogW0dvb2dsZUNoYXJ0Q29tcG9uZW50LCBSYXdDaGFydENvbXBvbmVudF1cclxufSlcclxuZXhwb3J0IGNsYXNzIEdvb2dsZUNoYXJ0c01vZHVsZSB7XHJcbiAgcHVibGljIHN0YXRpYyBmb3JSb290KGdvb2dsZUFwaUtleT86IHN0cmluZywgY2hhcnRWZXJzaW9uPzogc3RyaW5nKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBuZ01vZHVsZTogR29vZ2xlQ2hhcnRzTW9kdWxlLFxyXG4gICAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICBHT09HTEVfQ0hBUlRTX1BST1ZJREVSUyxcclxuICAgICAgICB7IHByb3ZpZGU6IEdPT0dMRV9BUElfS0VZLCB1c2VWYWx1ZTogZ29vZ2xlQXBpS2V5ID8gZ29vZ2xlQXBpS2V5IDogJycgfSxcclxuICAgICAgICB7IHByb3ZpZGU6IENIQVJUX1ZFUlNJT04sIHVzZVZhbHVlOiBjaGFydFZlcnNpb24gPyBjaGFydFZlcnNpb24gOiAnNDYnIH1cclxuICAgICAgXVxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXR1cFNjcmlwdExvYWRlclNlcnZpY2UobG9jYWxlSWQ6IHN0cmluZywgZ29vZ2xlQXBpS2V5OiBzdHJpbmcsIGNoYXJ0VmVyc2lvbjogc3RyaW5nKTogU2NyaXB0TG9hZGVyU2VydmljZSB7XHJcbiAgcmV0dXJuIG5ldyBTY3JpcHRMb2FkZXJTZXJ2aWNlKGxvY2FsZUlkLCBnb29nbGVBcGlLZXksIGNoYXJ0VmVyc2lvbik7XHJcbn1cclxuIl19