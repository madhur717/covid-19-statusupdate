/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject, LOCALE_ID, Optional } from '@angular/core';
import { Observable, Subject, of } from 'rxjs';
import { GOOGLE_API_KEY, CHART_VERSION } from '../models/injection-tokens.model';
import * as ɵngcc0 from '@angular/core';
var ScriptLoaderService = /** @class */ (function () {
    function ScriptLoaderService(localeId, googleApiKey, chartVersion) {
        this.localeId = localeId;
        this.googleApiKey = googleApiKey;
        this.chartVersion = chartVersion;
        this.scriptSource = 'https://www.gstatic.com/charts/loader.js';
        this.onLoadSubject = new Subject();
        this.initialize();
    }
    Object.defineProperty(ScriptLoaderService.prototype, "onReady", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.doneLoading) {
                return of(true);
            }
            return this.onLoadSubject.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScriptLoaderService.prototype, "doneLoading", {
        get: /**
         * @return {?}
         */
        function () {
            if (typeof google === 'undefined' || typeof google.charts === 'undefined') {
                return false;
            }
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScriptLoaderService.prototype, "isLoading", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.doneLoading) {
                return false;
            }
            /** @type {?} */
            var pageScripts = Array.from(document.getElementsByTagName('script'));
            /** @type {?} */
            var googleChartsScript = pageScripts.find((/**
             * @param {?} script
             * @return {?}
             */
            function (script) { return script.src === _this.scriptSource; }));
            return googleChartsScript !== undefined;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} packages
     * @return {?}
     */
    ScriptLoaderService.prototype.loadChartPackages = /**
     * @param {?} packages
     * @return {?}
     */
    function (packages) {
        var _this = this;
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            /** @type {?} */
            var config = {
                packages: packages,
                language: _this.localeId,
                mapsApiKey: _this.googleApiKey
            };
            google.charts.load(_this.chartVersion, config);
            google.charts.setOnLoadCallback((/**
             * @return {?}
             */
            function () {
                observer.next();
                observer.complete();
            }));
        }));
    };
    /**
     * @private
     * @return {?}
     */
    ScriptLoaderService.prototype.initialize = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.doneLoading && !this.isLoading) {
            /** @type {?} */
            var script = this.createScriptElement();
            script.onload = (/**
             * @return {?}
             */
            function () {
                _this.onLoadSubject.next(true);
                _this.onLoadSubject.complete();
            });
            script.onerror = (/**
             * @return {?}
             */
            function () {
                console.error('Failed to load the google chart script!');
                _this.onLoadSubject.error('Failed to load the google chart script!');
                _this.onLoadSubject.complete();
            });
        }
    };
    /**
     * @private
     * @return {?}
     */
    ScriptLoaderService.prototype.createScriptElement = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = this.scriptSource;
        script.async = true;
        document.getElementsByTagName('head')[0].appendChild(script);
        return script;
    };
    /** @nocollapse */
    ScriptLoaderService.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: String, decorators: [{ type: Inject, args: [GOOGLE_API_KEY,] }, { type: Optional }] },
        { type: String, decorators: [{ type: Inject, args: [CHART_VERSION,] }, { type: Optional }] }
    ]; };
ScriptLoaderService.ɵfac = function ScriptLoaderService_Factory(t) { return new (t || ScriptLoaderService)(ɵngcc0.ɵɵinject(LOCALE_ID), ɵngcc0.ɵɵinject(GOOGLE_API_KEY, 8), ɵngcc0.ɵɵinject(CHART_VERSION, 8)); };
ScriptLoaderService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ScriptLoaderService, factory: function (t) { return ScriptLoaderService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScriptLoaderService, [{
        type: Injectable
    }], function () { return [{ type: String, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }, { type: String, decorators: [{
                type: Inject,
                args: [GOOGLE_API_KEY]
            }, {
                type: Optional
            }] }, { type: String, decorators: [{
                type: Inject,
                args: [CHART_VERSION]
            }, {
                type: Optional
            }] }]; }, null); })();
    return ScriptLoaderService;
}());
export { ScriptLoaderService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ScriptLoaderService.prototype.scriptSource;
    /**
     * @type {?}
     * @private
     */
    ScriptLoaderService.prototype.onLoadSubject;
    /**
     * @type {?}
     * @private
     */
    ScriptLoaderService.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    ScriptLoaderService.prototype.googleApiKey;
    /**
     * @type {?}
     * @private
     */
    ScriptLoaderService.prototype.chartVersion;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,