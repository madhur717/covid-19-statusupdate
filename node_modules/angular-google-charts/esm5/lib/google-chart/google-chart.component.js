/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/// <reference types="google.visualization"/>
/// <reference types="google.visualization"/>
import { Component, ElementRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { ScriptLoaderService } from '../script-loader/script-loader.service';
import { RawChartComponent } from '../raw-chart/raw-chart.component';
import * as ɵngcc0 from '@angular/core';
var GoogleChartComponent = /** @class */ (function (_super) {
    tslib_1.__extends(GoogleChartComponent, _super);
    function GoogleChartComponent(element, loaderService) {
        var _this = _super.call(this, element, loaderService) || this;
        _this.roles = new Array();
        _this.width = undefined;
        _this.height = undefined;
        _this.options = {};
        return _this;
    }
    /**
     * @return {?}
     */
    GoogleChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.type == null) {
            throw new Error('Can\'t create a Google Chart without specifying a type!');
        }
        if (this.data == null) {
            throw new Error('Can\'t create a Google Chart without data!');
        }
        this.chartData = {
            chartType: this.type
        };
        this.loaderService.onReady.subscribe((/**
         * @return {?}
         */
        function () {
            _this.createChart();
        }));
    };
    /**
     * @return {?}
     */
    GoogleChartComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        if (this.wrapper) {
            this.chartData = {
                chartType: this.type,
                dataTable: this.getDataTable(),
                options: this.parseOptions()
            };
        }
        _super.prototype.ngOnChanges.call(this);
    };
    /**
     * @protected
     * @return {?}
     */
    GoogleChartComponent.prototype.parseOptions = /**
     * @protected
     * @return {?}
     */
    function () {
        return tslib_1.__assign({ title: this.title, width: this.width, height: this.height }, this.options);
    };
    /**
     * @protected
     * @return {?}
     */
    GoogleChartComponent.prototype.createChart = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        this.loadNeededPackages().subscribe((/**
         * @return {?}
         */
        function () {
            _this.chartData = {
                chartType: _this.type,
                dataTable: _this.getDataTable(),
                options: _this.parseOptions()
            };
            _this.wrapper = new google.visualization.ChartWrapper();
            _this.updateChart();
        }));
    };
    /**
     * @protected
     * @return {?}
     */
    GoogleChartComponent.prototype.getDataTable = /**
     * @protected
     * @return {?}
     */
    function () {
        if (this.columnNames) {
            /** @type {?} */
            var columns = this.parseRoles(this.columnNames);
            this.firstRowIsData = false;
            return tslib_1.__spread([columns], this.data);
        }
        else {
            this.firstRowIsData = true;
            return this.data;
        }
    };
    /**
     * @private
     * @param {?} columnNames
     * @return {?}
     */
    GoogleChartComponent.prototype.parseRoles = /**
     * @private
     * @param {?} columnNames
     * @return {?}
     */
    function (columnNames) {
        /** @type {?} */
        var columnNamesWithRoles = columnNames.slice();
        if (this.roles) {
            // Roles must be copied to avoid modifying the index everytime there's a change from ngOnChanges.
            /** @type {?} */
            var copyRoles_1 = this.roles.map((/**
             * @param {?} role
             * @return {?}
             */
            function (role) { return Object.assign({}, role); }));
            copyRoles_1.forEach((/**
             * @param {?} role
             * @return {?}
             */
            function (role) {
                var e_1, _a;
                /** @type {?} */
                var roleData = {
                    type: role.type,
                    role: role.role
                };
                if (role.p) {
                    roleData.p = role.p;
                }
                if (role.index != null) {
                    columnNamesWithRoles.splice(role.index + 1, 0, roleData);
                    try {
                        for (var copyRoles_2 = tslib_1.__values(copyRoles_1), copyRoles_2_1 = copyRoles_2.next(); !copyRoles_2_1.done; copyRoles_2_1 = copyRoles_2.next()) {
                            var otherRole = copyRoles_2_1.value;
                            if (otherRole === role) {
                                continue;
                            }
                            if (otherRole.index > role.index) {
                                otherRole.index++;
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (copyRoles_2_1 && !copyRoles_2_1.done && (_a = copyRoles_2.return)) _a.call(copyRoles_2);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                else {
                    columnNamesWithRoles.push(roleData);
                }
            }));
        }
        return columnNamesWithRoles;
    };
    /** @nocollapse */
    GoogleChartComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ScriptLoaderService }
    ]; };
    GoogleChartComponent.propDecorators = {
        data: [{ type: Input }],
        columnNames: [{ type: Input }],
        roles: [{ type: Input }],
        title: [{ type: Input }],
        width: [{ type: Input }],
        height: [{ type: Input }],
        options: [{ type: Input }],
        type: [{ type: Input }]
    };
GoogleChartComponent.ɵfac = function GoogleChartComponent_Factory(t) { return new (t || GoogleChartComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ScriptLoaderService)); };
GoogleChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: GoogleChartComponent, selectors: [["google-chart"]], inputs: { data: "data", columnNames: "columnNames", roles: "roles", title: "title", width: "width", height: "height", options: "options", type: "type" }, exportAs: ["google-chart"], features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function GoogleChartComponent_Template(rf, ctx) { }, styles: ["[_nghost-%COMP%] { width: fit-content; display: block; }"], changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GoogleChartComponent, [{
        type: Component,
        args: [{
                // tslint:disable-next-line:component-selector
                selector: 'google-chart',
                template: '',
                exportAs: 'google-chart',
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [':host { width: fit-content; display: block; }']
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ScriptLoaderService }]; }, { data: [{
            type: Input
        }], columnNames: [{
            type: Input
        }], roles: [{
            type: Input
        }], title: [{
            type: Input
        }], width: [{
            type: Input
        }], height: [{
            type: Input
        }], options: [{
            type: Input
        }], type: [{
            type: Input
        }] }); })();
    return GoogleChartComponent;
}(RawChartComponent));
export { GoogleChartComponent };
if (false) {
    /** @type {?} */
    GoogleChartComponent.prototype.data;
    /** @type {?} */
    GoogleChartComponent.prototype.columnNames;
    /** @type {?} */
    GoogleChartComponent.prototype.roles;
    /** @type {?} */
    GoogleChartComponent.prototype.title;
    /** @type {?} */
    GoogleChartComponent.prototype.width;
    /** @type {?} */
    GoogleChartComponent.prototype.height;
    /** @type {?} */
    GoogleChartComponent.prototype.options;
    /** @type {?} */
    GoogleChartComponent.prototype.type;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,