(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/common'),exports, require('@angular/core'), require('@angular/forms'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-bootstrap/pagination', ['@angular/core','@angular/common','exports', '@angular/core', '@angular/forms', '@angular/common'], factory) :
    (global = global || self, factory(global.ng.core,global.ng.common,(global['ngx-bootstrap'] = global['ngx-bootstrap'] || {}, global['ngx-bootstrap'].pagination = {}), global.ng.core, global.ng.forms, global.ng.common));
}(this, function (ɵngcc0,ɵngcc1,exports, core, forms, common) { 
var _c0 = function (a0, a1) { return { "pull-left": a0, "float-left": a1 }; };
var _c1 = function (a0, a1) { return { "pull-right": a0, "float-right": a1 }; };
function PaginationComponent_li_1_Template(rf, ctx) { if (rf & 1) {
    var _r1010 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 6);
    ɵngcc0.ɵɵelementStart(1, "a", 7);
    ɵngcc0.ɵɵlistener("click", function PaginationComponent_li_1_Template_a_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r1010); var ctx_r1009 = ɵngcc0.ɵɵnextContext(); return ctx_r1009.selectPage(1, $event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1004 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("disabled", ctx_r1004.noPrevious() || ctx_r1004.disabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("innerHTML", ctx_r1004.getText("first"), ɵngcc0.ɵɵsanitizeHtml);
} }
function PaginationComponent_li_2_Template(rf, ctx) { if (rf & 1) {
    var _r1012 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 8);
    ɵngcc0.ɵɵelementStart(1, "a", 7);
    ɵngcc0.ɵɵlistener("click", function PaginationComponent_li_2_Template_a_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r1012); var ctx_r1011 = ɵngcc0.ɵɵnextContext(); return ctx_r1011.selectPage(ctx_r1011.page - 1, $event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1005 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("disabled", ctx_r1005.noPrevious() || ctx_r1005.disabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("innerHTML", ctx_r1005.getText("previous"), ɵngcc0.ɵɵsanitizeHtml);
} }
function PaginationComponent_li_3_Template(rf, ctx) { if (rf & 1) {
    var _r1015 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 9);
    ɵngcc0.ɵɵelementStart(1, "a", 7);
    ɵngcc0.ɵɵlistener("click", function PaginationComponent_li_3_Template_a_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r1015); var pg_r1013 = ctx.$implicit; var ctx_r1014 = ɵngcc0.ɵɵnextContext(); return ctx_r1014.selectPage(pg_r1013.number, $event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var pg_r1013 = ctx.$implicit;
    var ctx_r1006 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("active", pg_r1013.active)("disabled", ctx_r1006.disabled && !pg_r1013.active);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("innerHTML", pg_r1013.text, ɵngcc0.ɵɵsanitizeHtml);
} }
function PaginationComponent_li_4_Template(rf, ctx) { if (rf & 1) {
    var _r1017 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 10);
    ɵngcc0.ɵɵelementStart(1, "a", 7);
    ɵngcc0.ɵɵlistener("click", function PaginationComponent_li_4_Template_a_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r1017); var ctx_r1016 = ɵngcc0.ɵɵnextContext(); return ctx_r1016.selectPage(ctx_r1016.page + 1, $event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1007 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("disabled", ctx_r1007.noNext() || ctx_r1007.disabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("innerHTML", ctx_r1007.getText("next"), ɵngcc0.ɵɵsanitizeHtml);
} }
function PaginationComponent_li_5_Template(rf, ctx) { if (rf & 1) {
    var _r1019 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 11);
    ɵngcc0.ɵɵelementStart(1, "a", 7);
    ɵngcc0.ɵɵlistener("click", function PaginationComponent_li_5_Template_a_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r1019); var ctx_r1018 = ɵngcc0.ɵɵnextContext(); return ctx_r1018.selectPage(ctx_r1018.totalPages, $event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1008 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("disabled", ctx_r1008.noNext() || ctx_r1008.disabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("innerHTML", ctx_r1008.getText("last"), ɵngcc0.ɵɵsanitizeHtml);
} }
'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Provides default values for Pagination and pager components
     */
    var PaginationConfig = /** @class */ (function () {
        function PaginationConfig() {
            this.main = {
                maxSize: void 0,
                itemsPerPage: 10,
                boundaryLinks: false,
                directionLinks: true,
                firstText: 'First',
                previousText: 'Previous',
                nextText: 'Next',
                lastText: 'Last',
                pageBtnClass: '',
                rotate: true
            };
            this.pager = {
                itemsPerPage: 15,
                previousText: '« Previous',
                nextText: 'Next »',
                pageBtnClass: '',
                align: true
            };
        }
PaginationConfig.ɵfac = function PaginationConfig_Factory(t) { return new (t || PaginationConfig)(); };
PaginationConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: PaginationConfig, factory: function (t) { return PaginationConfig.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PaginationConfig, [{
        type: core.Injectable
    }], function () { return []; }, null); })();
        return PaginationConfig;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var PAGER_CONTROL_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        /* tslint:disable-next-line: no-use-before-declare */
        useExisting: core.forwardRef((/**
         * @return {?}
         */
        function () { return PagerComponent; })),
        multi: true
    };
    var PagerComponent = /** @class */ (function () {
        function PagerComponent(elementRef, paginationConfig, changeDetection) {
            this.elementRef = elementRef;
            this.changeDetection = changeDetection;
            /**
             * fired when total pages count changes, $event:number equals to total pages count
             */
            this.numPages = new core.EventEmitter();
            /**
             * fired when page was changed, $event:{page, itemsPerPage} equals to
             * object with current page index and number of items per page
             */
            this.pageChanged = new core.EventEmitter();
            this.onChange = Function.prototype;
            this.onTouched = Function.prototype;
            this.inited = false;
            this._page = 1;
            this.elementRef = elementRef;
            if (!this.config) {
                this.configureOptions(Object.assign({}, paginationConfig.main, paginationConfig.pager));
            }
        }
        Object.defineProperty(PagerComponent.prototype, "itemsPerPage", {
            /** maximum number of items per page. If value less than 1 will display all items on one page */
            get: /**
             * maximum number of items per page. If value less than 1 will display all items on one page
             * @return {?}
             */
            function () {
                return this._itemsPerPage;
            },
            set: /**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                this._itemsPerPage = v;
                this.totalPages = this.calculateTotalPages();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PagerComponent.prototype, "totalItems", {
            /** total number of items in all pages */
            get: /**
             * total number of items in all pages
             * @return {?}
             */
            function () {
                return this._totalItems;
            },
            set: /**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                this._totalItems = v;
                this.totalPages = this.calculateTotalPages();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PagerComponent.prototype, "totalPages", {
            get: /**
             * @return {?}
             */
            function () {
                return this._totalPages;
            },
            set: /**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                this._totalPages = v;
                this.numPages.emit(v);
                if (this.inited) {
                    this.selectPage(this.page);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PagerComponent.prototype, "page", {
            get: /**
             * @return {?}
             */
            function () {
                return this._page;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                /** @type {?} */
                var _previous = this._page;
                this._page = value > this.totalPages ? this.totalPages : value || 1;
                this.changeDetection.markForCheck();
                if (_previous === this._page || typeof _previous === 'undefined') {
                    return;
                }
                this.pageChanged.emit({
                    page: this._page,
                    itemsPerPage: this.itemsPerPage
                });
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} config
         * @return {?}
         */
        PagerComponent.prototype.configureOptions = /**
         * @param {?} config
         * @return {?}
         */
        function (config) {
            this.config = Object.assign({}, config);
        };
        /**
         * @return {?}
         */
        PagerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            if (typeof window !== 'undefined') {
                this.classMap = this.elementRef.nativeElement.getAttribute('class') || '';
            }
            // watch for maxSize
            this.maxSize =
                typeof this.maxSize !== 'undefined' ? this.maxSize : this.config.maxSize;
            this.rotate =
                typeof this.rotate !== 'undefined' ? this.rotate : this.config.rotate;
            this.boundaryLinks =
                typeof this.boundaryLinks !== 'undefined'
                    ? this.boundaryLinks
                    : this.config.boundaryLinks;
            this.directionLinks =
                typeof this.directionLinks !== 'undefined'
                    ? this.directionLinks
                    : this.config.directionLinks;
            this.pageBtnClass =
                typeof this.pageBtnClass !== 'undefined'
                    ? this.pageBtnClass
                    : this.config.pageBtnClass;
            // base class
            this.itemsPerPage =
                typeof this.itemsPerPage !== 'undefined'
                    ? this.itemsPerPage
                    : this.config.itemsPerPage;
            this.totalPages = this.calculateTotalPages();
            // this class
            this.pages = this.getPages(this.page, this.totalPages);
            this.inited = true;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        PagerComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.page = value;
            this.pages = this.getPages(this.page, this.totalPages);
        };
        /**
         * @param {?} key
         * @return {?}
         */
        PagerComponent.prototype.getText = /**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            // tslint:disable-next-line:no-any
            return ((/** @type {?} */ (this)))[key + "Text"] || ((/** @type {?} */ (this))).config[key + "Text"];
        };
        /**
         * @return {?}
         */
        PagerComponent.prototype.noPrevious = /**
         * @return {?}
         */
        function () {
            return this.page === 1;
        };
        /**
         * @return {?}
         */
        PagerComponent.prototype.noNext = /**
         * @return {?}
         */
        function () {
            return this.page === this.totalPages;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        PagerComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onChange = fn;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        PagerComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onTouched = fn;
        };
        /**
         * @param {?} page
         * @param {?=} event
         * @return {?}
         */
        PagerComponent.prototype.selectPage = /**
         * @param {?} page
         * @param {?=} event
         * @return {?}
         */
        function (page, event) {
            if (event) {
                event.preventDefault();
            }
            if (!this.disabled) {
                if (event && event.target) {
                    // tslint:disable-next-line:no-any
                    /** @type {?} */
                    var target = event.target;
                    target.blur();
                }
                this.writeValue(page);
                this.onChange(this.page);
            }
        };
        // Create page object used in template
        // Create page object used in template
        /**
         * @protected
         * @param {?} num
         * @param {?} text
         * @param {?} active
         * @return {?}
         */
        PagerComponent.prototype.makePage = 
        // Create page object used in template
        /**
         * @protected
         * @param {?} num
         * @param {?} text
         * @param {?} active
         * @return {?}
         */
        function (num, text, active) {
            return { text: text, number: num, active: active };
        };
        /**
         * @protected
         * @param {?} currentPage
         * @param {?} totalPages
         * @return {?}
         */
        PagerComponent.prototype.getPages = /**
         * @protected
         * @param {?} currentPage
         * @param {?} totalPages
         * @return {?}
         */
        function (currentPage, totalPages) {
            /** @type {?} */
            var pages = [];
            // Default page limits
            /** @type {?} */
            var startPage = 1;
            /** @type {?} */
            var endPage = totalPages;
            /** @type {?} */
            var isMaxSized = typeof this.maxSize !== 'undefined' && this.maxSize < totalPages;
            // recompute if maxSize
            if (isMaxSized) {
                if (this.rotate) {
                    // Current page is displayed in the middle of the visible ones
                    startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);
                    endPage = startPage + this.maxSize - 1;
                    // Adjust if limit is exceeded
                    if (endPage > totalPages) {
                        endPage = totalPages;
                        startPage = endPage - this.maxSize + 1;
                    }
                }
                else {
                    // Visible pages are paginated with maxSize
                    startPage =
                        (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;
                    // Adjust last page if limit is exceeded
                    endPage = Math.min(startPage + this.maxSize - 1, totalPages);
                }
            }
            // Add page number links
            for (var num = startPage; num <= endPage; num++) {
                /** @type {?} */
                var page = this.makePage(num, num.toString(), num === currentPage);
                pages.push(page);
            }
            // Add links to move between page sets
            if (isMaxSized && !this.rotate) {
                if (startPage > 1) {
                    /** @type {?} */
                    var previousPageSet = this.makePage(startPage - 1, '...', false);
                    pages.unshift(previousPageSet);
                }
                if (endPage < totalPages) {
                    /** @type {?} */
                    var nextPageSet = this.makePage(endPage + 1, '...', false);
                    pages.push(nextPageSet);
                }
            }
            return pages;
        };
        // base class
        // base class
        /**
         * @protected
         * @return {?}
         */
        PagerComponent.prototype.calculateTotalPages = 
        // base class
        /**
         * @protected
         * @return {?}
         */
        function () {
            /** @type {?} */
            var totalPages = this.itemsPerPage < 1
                ? 1
                : Math.ceil(this.totalItems / this.itemsPerPage);
            return Math.max(totalPages || 0, 1);
        };
        /** @nocollapse */
        PagerComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: PaginationConfig },
            { type: core.ChangeDetectorRef }
        ]; };
        PagerComponent.propDecorators = {
            align: [{ type: core.Input }],
            maxSize: [{ type: core.Input }],
            boundaryLinks: [{ type: core.Input }],
            directionLinks: [{ type: core.Input }],
            firstText: [{ type: core.Input }],
            previousText: [{ type: core.Input }],
            nextText: [{ type: core.Input }],
            lastText: [{ type: core.Input }],
            rotate: [{ type: core.Input }],
            pageBtnClass: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            numPages: [{ type: core.Output }],
            pageChanged: [{ type: core.Output }],
            itemsPerPage: [{ type: core.Input }],
            totalItems: [{ type: core.Input }]
        };
PagerComponent.ɵfac = function PagerComponent_Factory(t) { return new (t || PagerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(PaginationConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
PagerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PagerComponent, selectors: [["pager"]], inputs: { itemsPerPage: "itemsPerPage", totalItems: "totalItems", maxSize: "maxSize", rotate: "rotate", boundaryLinks: "boundaryLinks", directionLinks: "directionLinks", pageBtnClass: "pageBtnClass", align: "align", firstText: "firstText", previousText: "previousText", nextText: "nextText", lastText: "lastText", disabled: "disabled" }, outputs: { numPages: "numPages", pageChanged: "pageChanged" }, features: [ɵngcc0.ɵɵProvidersFeature([PAGER_CONTROL_VALUE_ACCESSOR])], decls: 7, vars: 24, consts: [[1, "pager"], [3, "ngClass"], ["href", "", 3, "click"]], template: function PagerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "ul", 0);
        ɵngcc0.ɵɵelementStart(1, "li", 1);
        ɵngcc0.ɵɵelementStart(2, "a", 2);
        ɵngcc0.ɵɵlistener("click", function PagerComponent_Template_a_click_2_listener($event) { return ctx.selectPage(ctx.page - 1, $event); });
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "li", 1);
        ɵngcc0.ɵɵelementStart(5, "a", 2);
        ɵngcc0.ɵɵlistener("click", function PagerComponent_Template_a_click_5_listener($event) { return ctx.selectPage(ctx.page + 1, $event); });
        ɵngcc0.ɵɵtext(6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassMap(ctx.pageBtnClass);
        ɵngcc0.ɵɵclassProp("disabled", ctx.noPrevious())("previous", ctx.align);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(18, _c0, ctx.align, ctx.align));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.getText("previous"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassMap(ctx.pageBtnClass);
        ɵngcc0.ɵɵclassProp("disabled", ctx.noNext())("next", ctx.align);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(21, _c1, ctx.align, ctx.align));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.getText("next"));
    } }, directives: [ɵngcc1.NgClass], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PagerComponent, [{
        type: core.Component,
        args: [{
                selector: 'pager',
                template: "<ul class=\"pager\">\n  <li [class.disabled]=\"noPrevious()\" [class.previous]=\"align\"\n      [ngClass]=\"{'pull-left': align, 'float-left': align}\"\n      class=\"{{ pageBtnClass }}\">\n    <a href (click)=\"selectPage(page - 1, $event)\">{{ getText('previous') }}</a>\n  </li>\n  <li [class.disabled]=\"noNext()\" [class.next]=\"align\"\n      [ngClass]=\"{'pull-right': align, 'float-right': align}\"\n      class=\"{{ pageBtnClass }}\">\n    <a href (click)=\"selectPage(page + 1, $event)\">{{ getText('next') }}</a>\n  </li>\n</ul>\n",
                providers: [PAGER_CONTROL_VALUE_ACCESSOR]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: PaginationConfig }, { type: ɵngcc0.ChangeDetectorRef }]; }, { numPages: [{
            type: core.Output
        }], pageChanged: [{
            type: core.Output
        }], itemsPerPage: [{
            type: core.Input
        }], totalItems: [{
            type: core.Input
        }], maxSize: [{
            type: core.Input
        }], rotate: [{
            type: core.Input
        }], boundaryLinks: [{
            type: core.Input
        }], directionLinks: [{
            type: core.Input
        }], pageBtnClass: [{
            type: core.Input
        }], align: [{
            type: core.Input
        }], firstText: [{
            type: core.Input
        }], previousText: [{
            type: core.Input
        }], nextText: [{
            type: core.Input
        }], lastText: [{
            type: core.Input
        }], disabled: [{
            type: core.Input
        }] }); })();
        return PagerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var PAGINATION_CONTROL_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        /* tslint:disable-next-line: no-use-before-declare */
        useExisting: core.forwardRef((/**
         * @return {?}
         */
        function () { return PaginationComponent; })),
        multi: true
    };
    var PaginationComponent = /** @class */ (function () {
        function PaginationComponent(elementRef, paginationConfig, changeDetection) {
            this.elementRef = elementRef;
            this.changeDetection = changeDetection;
            /**
             * fired when total pages count changes, $event:number equals to total pages count
             */
            this.numPages = new core.EventEmitter();
            /**
             * fired when page was changed, $event:{page, itemsPerPage} equals to object
             * with current page index and number of items per page
             */
            this.pageChanged = new core.EventEmitter();
            this.onChange = Function.prototype;
            this.onTouched = Function.prototype;
            this.inited = false;
            this._page = 1;
            this.elementRef = elementRef;
            if (!this.config) {
                this.configureOptions(paginationConfig.main);
            }
        }
        Object.defineProperty(PaginationComponent.prototype, "itemsPerPage", {
            /** maximum number of items per page. If value less than 1 will display all items on one page */
            get: /**
             * maximum number of items per page. If value less than 1 will display all items on one page
             * @return {?}
             */
            function () {
                return this._itemsPerPage;
            },
            set: /**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                this._itemsPerPage = v;
                this.totalPages = this.calculateTotalPages();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PaginationComponent.prototype, "totalItems", {
            /** total number of items in all pages */
            get: /**
             * total number of items in all pages
             * @return {?}
             */
            function () {
                return this._totalItems;
            },
            set: /**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                this._totalItems = v;
                this.totalPages = this.calculateTotalPages();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PaginationComponent.prototype, "totalPages", {
            get: /**
             * @return {?}
             */
            function () {
                return this._totalPages;
            },
            set: /**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                this._totalPages = v;
                this.numPages.emit(v);
                if (this.inited) {
                    this.selectPage(this.page);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PaginationComponent.prototype, "page", {
            get: /**
             * @return {?}
             */
            function () {
                return this._page;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                /** @type {?} */
                var _previous = this._page;
                this._page = value > this.totalPages ? this.totalPages : value || 1;
                this.changeDetection.markForCheck();
                if (_previous === this._page || typeof _previous === 'undefined') {
                    return;
                }
                this.pageChanged.emit({
                    page: this._page,
                    itemsPerPage: this.itemsPerPage
                });
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} config
         * @return {?}
         */
        PaginationComponent.prototype.configureOptions = /**
         * @param {?} config
         * @return {?}
         */
        function (config) {
            this.config = Object.assign({}, config);
        };
        /**
         * @return {?}
         */
        PaginationComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            if (typeof window !== 'undefined') {
                this.classMap = this.elementRef.nativeElement.getAttribute('class') || '';
            }
            // watch for maxSize
            this.maxSize =
                typeof this.maxSize !== 'undefined' ? this.maxSize : this.config.maxSize;
            this.rotate =
                typeof this.rotate !== 'undefined' ? this.rotate : this.config.rotate;
            this.boundaryLinks =
                typeof this.boundaryLinks !== 'undefined'
                    ? this.boundaryLinks
                    : this.config.boundaryLinks;
            this.directionLinks =
                typeof this.directionLinks !== 'undefined'
                    ? this.directionLinks
                    : this.config.directionLinks;
            this.pageBtnClass =
                typeof this.pageBtnClass !== 'undefined'
                    ? this.pageBtnClass
                    : this.config.pageBtnClass;
            // base class
            this.itemsPerPage =
                typeof this.itemsPerPage !== 'undefined'
                    ? this.itemsPerPage
                    : this.config.itemsPerPage;
            this.totalPages = this.calculateTotalPages();
            // this class
            this.pages = this.getPages(this.page, this.totalPages);
            this.inited = true;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        PaginationComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.page = value;
            this.pages = this.getPages(this.page, this.totalPages);
        };
        /**
         * @param {?} key
         * @return {?}
         */
        PaginationComponent.prototype.getText = /**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            // tslint:disable-next-line:no-any
            return ((/** @type {?} */ (this)))[key + "Text"] || ((/** @type {?} */ (this))).config[key + "Text"];
        };
        /**
         * @return {?}
         */
        PaginationComponent.prototype.noPrevious = /**
         * @return {?}
         */
        function () {
            return this.page === 1;
        };
        /**
         * @return {?}
         */
        PaginationComponent.prototype.noNext = /**
         * @return {?}
         */
        function () {
            return this.page === this.totalPages;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        PaginationComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onChange = fn;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        PaginationComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onTouched = fn;
        };
        /**
         * @param {?} page
         * @param {?=} event
         * @return {?}
         */
        PaginationComponent.prototype.selectPage = /**
         * @param {?} page
         * @param {?=} event
         * @return {?}
         */
        function (page, event) {
            if (event) {
                event.preventDefault();
            }
            if (!this.disabled) {
                if (event && event.target) {
                    // tslint:disable-next-line:no-any
                    /** @type {?} */
                    var target = event.target;
                    target.blur();
                }
                this.writeValue(page);
                this.onChange(this.page);
            }
        };
        // Create page object used in template
        // Create page object used in template
        /**
         * @protected
         * @param {?} num
         * @param {?} text
         * @param {?} active
         * @return {?}
         */
        PaginationComponent.prototype.makePage = 
        // Create page object used in template
        /**
         * @protected
         * @param {?} num
         * @param {?} text
         * @param {?} active
         * @return {?}
         */
        function (num, text, active) {
            return { text: text, number: num, active: active };
        };
        /**
         * @protected
         * @param {?} currentPage
         * @param {?} totalPages
         * @return {?}
         */
        PaginationComponent.prototype.getPages = /**
         * @protected
         * @param {?} currentPage
         * @param {?} totalPages
         * @return {?}
         */
        function (currentPage, totalPages) {
            /** @type {?} */
            var pages = [];
            // Default page limits
            /** @type {?} */
            var startPage = 1;
            /** @type {?} */
            var endPage = totalPages;
            /** @type {?} */
            var isMaxSized = typeof this.maxSize !== 'undefined' && this.maxSize < totalPages;
            // recompute if maxSize
            if (isMaxSized) {
                if (this.rotate) {
                    // Current page is displayed in the middle of the visible ones
                    startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);
                    endPage = startPage + this.maxSize - 1;
                    // Adjust if limit is exceeded
                    if (endPage > totalPages) {
                        endPage = totalPages;
                        startPage = endPage - this.maxSize + 1;
                    }
                }
                else {
                    // Visible pages are paginated with maxSize
                    startPage =
                        (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;
                    // Adjust last page if limit is exceeded
                    endPage = Math.min(startPage + this.maxSize - 1, totalPages);
                }
            }
            // Add page number links
            for (var num = startPage; num <= endPage; num++) {
                /** @type {?} */
                var page = this.makePage(num, num.toString(), num === currentPage);
                pages.push(page);
            }
            // Add links to move between page sets
            if (isMaxSized && !this.rotate) {
                if (startPage > 1) {
                    /** @type {?} */
                    var previousPageSet = this.makePage(startPage - 1, '...', false);
                    pages.unshift(previousPageSet);
                }
                if (endPage < totalPages) {
                    /** @type {?} */
                    var nextPageSet = this.makePage(endPage + 1, '...', false);
                    pages.push(nextPageSet);
                }
            }
            return pages;
        };
        // base class
        // base class
        /**
         * @protected
         * @return {?}
         */
        PaginationComponent.prototype.calculateTotalPages = 
        // base class
        /**
         * @protected
         * @return {?}
         */
        function () {
            /** @type {?} */
            var totalPages = this.itemsPerPage < 1
                ? 1
                : Math.ceil(this.totalItems / this.itemsPerPage);
            return Math.max(totalPages || 0, 1);
        };
        /** @nocollapse */
        PaginationComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: PaginationConfig },
            { type: core.ChangeDetectorRef }
        ]; };
        PaginationComponent.propDecorators = {
            align: [{ type: core.Input }],
            maxSize: [{ type: core.Input }],
            boundaryLinks: [{ type: core.Input }],
            directionLinks: [{ type: core.Input }],
            firstText: [{ type: core.Input }],
            previousText: [{ type: core.Input }],
            nextText: [{ type: core.Input }],
            lastText: [{ type: core.Input }],
            rotate: [{ type: core.Input }],
            pageBtnClass: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            numPages: [{ type: core.Output }],
            pageChanged: [{ type: core.Output }],
            itemsPerPage: [{ type: core.Input }],
            totalItems: [{ type: core.Input }]
        };
PaginationComponent.ɵfac = function PaginationComponent_Factory(t) { return new (t || PaginationComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(PaginationConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
PaginationComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PaginationComponent, selectors: [["pagination"]], inputs: { itemsPerPage: "itemsPerPage", totalItems: "totalItems", maxSize: "maxSize", rotate: "rotate", boundaryLinks: "boundaryLinks", directionLinks: "directionLinks", pageBtnClass: "pageBtnClass", align: "align", firstText: "firstText", previousText: "previousText", nextText: "nextText", lastText: "lastText", disabled: "disabled" }, outputs: { numPages: "numPages", pageChanged: "pageChanged" }, features: [ɵngcc0.ɵɵProvidersFeature([PAGINATION_CONTROL_VALUE_ACCESSOR])], decls: 6, vars: 6, consts: [[1, "pagination", 3, "ngClass"], ["class", "pagination-first page-item", 3, "disabled", 4, "ngIf"], ["class", "pagination-prev page-item", 3, "disabled", 4, "ngIf"], ["class", "pagination-page page-item", 3, "active", "disabled", 4, "ngFor", "ngForOf"], ["class", "pagination-next page-item", 3, "disabled", 4, "ngIf"], ["class", "pagination-last page-item", 3, "disabled", 4, "ngIf"], [1, "pagination-first", "page-item"], ["href", "", 1, "page-link", 3, "innerHTML", "click"], [1, "pagination-prev", "page-item"], [1, "pagination-page", "page-item"], [1, "pagination-next", "page-item"], [1, "pagination-last", "page-item"]], template: function PaginationComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "ul", 0);
        ɵngcc0.ɵɵtemplate(1, PaginationComponent_li_1_Template, 2, 3, "li", 1);
        ɵngcc0.ɵɵtemplate(2, PaginationComponent_li_2_Template, 2, 3, "li", 2);
        ɵngcc0.ɵɵtemplate(3, PaginationComponent_li_3_Template, 2, 5, "li", 3);
        ɵngcc0.ɵɵtemplate(4, PaginationComponent_li_4_Template, 2, 3, "li", 4);
        ɵngcc0.ɵɵtemplate(5, PaginationComponent_li_5_Template, 2, 3, "li", 5);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ctx.classMap);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.boundaryLinks);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.directionLinks);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.pages);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.directionLinks);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.boundaryLinks);
    } }, directives: [ɵngcc1.NgClass, ɵngcc1.NgIf, ɵngcc1.NgForOf], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PaginationComponent, [{
        type: core.Component,
        args: [{
                selector: 'pagination',
                template: "<ul class=\"pagination\" [ngClass]=\"classMap\">\n  <li class=\"pagination-first page-item\"\n      *ngIf=\"boundaryLinks\"\n      [class.disabled]=\"noPrevious()||disabled\">\n    <a class=\"page-link\" href (click)=\"selectPage(1, $event)\"\n       [innerHTML]=\"getText('first')\"></a>\n  </li>\n\n  <li class=\"pagination-prev page-item\"\n      *ngIf=\"directionLinks\"\n      [class.disabled]=\"noPrevious()||disabled\">\n    <a class=\"page-link\" href (click)=\"selectPage(page - 1, $event)\"\n       [innerHTML]=\"getText('previous')\"></a>\n  </li>\n\n  <li *ngFor=\"let pg of pages\"\n      [class.active]=\"pg.active\"\n      [class.disabled]=\"disabled&&!pg.active\"\n      class=\"pagination-page page-item\">\n    <a class=\"page-link\" href (click)=\"selectPage(pg.number, $event)\"\n       [innerHTML]=\"pg.text\"></a>\n  </li>\n\n  <li class=\"pagination-next page-item\"\n      *ngIf=\"directionLinks\"\n      [class.disabled]=\"noNext()||disabled\">\n    <a class=\"page-link\" href (click)=\"selectPage(page + 1, $event)\"\n       [innerHTML]=\"getText('next')\"></a></li>\n\n  <li class=\"pagination-last page-item\"\n      *ngIf=\"boundaryLinks\"\n      [class.disabled]=\"noNext()||disabled\">\n    <a class=\"page-link\" href (click)=\"selectPage(totalPages, $event)\"\n       [innerHTML]=\"getText('last')\"></a></li>\n</ul>\n",
                providers: [PAGINATION_CONTROL_VALUE_ACCESSOR]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: PaginationConfig }, { type: ɵngcc0.ChangeDetectorRef }]; }, { numPages: [{
            type: core.Output
        }], pageChanged: [{
            type: core.Output
        }], itemsPerPage: [{
            type: core.Input
        }], totalItems: [{
            type: core.Input
        }], maxSize: [{
            type: core.Input
        }], rotate: [{
            type: core.Input
        }], boundaryLinks: [{
            type: core.Input
        }], directionLinks: [{
            type: core.Input
        }], pageBtnClass: [{
            type: core.Input
        }], align: [{
            type: core.Input
        }], firstText: [{
            type: core.Input
        }], previousText: [{
            type: core.Input
        }], nextText: [{
            type: core.Input
        }], lastText: [{
            type: core.Input
        }], disabled: [{
            type: core.Input
        }] }); })();
        return PaginationComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PaginationModule = /** @class */ (function () {
        function PaginationModule() {
        }
        /**
         * @return {?}
         */
        PaginationModule.forRoot = /**
         * @return {?}
         */
        function () {
            return { ngModule: PaginationModule, providers: [PaginationConfig] };
        };
PaginationModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: PaginationModule });
PaginationModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function PaginationModule_Factory(t) { return new (t || PaginationModule)(); }, imports: [[common.CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PaginationModule, { declarations: [PagerComponent,
        PaginationComponent], imports: [ɵngcc1.CommonModule], exports: [PagerComponent,
        PaginationComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PaginationModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule],
                declarations: [PagerComponent, PaginationComponent],
                exports: [PagerComponent, PaginationComponent]
            }]
    }], function () { return []; }, null); })();
        return PaginationModule;
    }());

    exports.PagerComponent = PagerComponent;
    exports.PaginationComponent = PaginationComponent;
    exports.PaginationConfig = PaginationConfig;
    exports.PaginationModule = PaginationModule;
    exports.ɵa = PAGER_CONTROL_VALUE_ACCESSOR;
    exports.ɵb = PAGINATION_CONTROL_VALUE_ACCESSOR;

    Object.defineProperty(exports, '__esModule', { value: true });

}));

//# sourceMappingURL=ngx-bootstrap-pagination.umd.js.map